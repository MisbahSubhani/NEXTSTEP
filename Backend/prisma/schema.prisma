// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id              String        @id @default(uuid())
  username        String        @unique
  name            String
  email           String        @unique
  password        String
  applications    Application[] // One student can apply to many internships
  favorites       Favorite[]    // One student can have many favorites
  resume          String?       // Path to the resume file (optional)
  lastLoginDate   DateTime?     // ðŸ•’ Tracks the last login date
  streakCount     Int           @default(0) // ðŸ”¥ Tracks the streak
}

model HR {
  id          String        @id @default(uuid())
  username    String        @unique
  name        String
  email       String        @unique
  password    String
  resume      Bytes?  
  internships Internships[] // One HR can have many internships
  notices      Notice[]  @relation("HRNotices")    // One HR can create many internships
}

model Feedback {
  id      String @id @default(uuid())
  name    String
  email   String
  message String
}

model Application {
  id           String      @id @default(uuid())
  studentId    String      // Foreign key to Student
  internshipId String      // Foreign key to Internships
  status       String      @default("Pending Review")
  student      Student     @relation(fields: [studentId], references: [id]) // Relationship to Student
  internship   Internships @relation(fields: [internshipId], references: [id], onDelete: Cascade) // Add onDelete here for cascading delete

  @@unique([studentId, internshipId]) // Enforce unique constraint on studentId and internshipId
}

model Internships {
  id            String        @id @default(uuid())
  company_name  String
  position      String
  location      String
  stipend       Int
  duration      Int
  deadline      DateTime? 
  starting_date DateTime
  is_immediate  Boolean       @default(false)
  created_at    DateTime      @default(now())
  hrId          String        // Foreign key to HR
  hr            HR            @relation(fields: [hrId], references: [id]) // Relationship to HR
  applications  Application[] // Remove the onDelete here
  favorites     Favorite[]    // Many favorites for this internship
}

model Favorite {
  id           String      @id @default(uuid())
  studentId    String      // Foreign key to Student
  internshipId String      // Foreign key to Internships
  student      Student     @relation(fields: [studentId], references: [id]) // Relationship to Student
  internship   Internships @relation(fields: [internshipId], references: [id],onDelete: Cascade) // Relationship to Internships

  @@unique([studentId, internshipId]) // Enforce unique constraint on studentId and internshipId
}

model Notice {
  id         String   @id @default(cuid())
  title      String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postedById String   // Foreign key to HR
   postedBy   HR       @relation("HRNotices", fields: [postedById], references: [id])
}
